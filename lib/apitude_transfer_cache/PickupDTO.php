<?php
/**
 * PickupDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  transfercache
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transfer Cache API
 *
 * # APItude Transfer Cache API  APItude also includes now the ability to download the transfers content & portfolio. This API will provide you with availability to **cache and download the routes operated by transfer services and as well as the rest of the static content**, like terminals, pickup points and such.  APItude transfers CACHE API is designed to provide Hotelbeds Group clients with a set of API calls to download:   * Routes * Pickup points * Hotels * Currencies * Master Data (Transfer types, Categories & Vehicle types) * Locations (countries, destinations & terminals)  APItude Transfers CACHE API is delivered via HTTPS GET requests. Reesponse data is returned in JSON, allowing you to easily build requests and parse responses in a standard way by using the tools included with most of the modern languages. Every exposed HTTP resource allows every client to create paginated responses by means of using offset & limit attributes.
 *
 * OpenAPI spec version: 1.0
 * Contact: integrations.btb@hotelbeds.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace transfercache\apitude_transfer_cache;

use \ArrayAccess;
use \transfercache\ObjectSerializer;

/**
 * PickupDTO Class Doc Comment
 *
 * @category Class
 * @package  transfercache
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PickupDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PickupDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
'city' => 'string',
'code' => 'int',
'company_code' => 'string',
'country_code' => 'string',
'hotel_code' => 'int',
'is_terminal' => 'string',
'latitude' => 'double',
'longitude' => 'double',
'name' => 'string',
'office_code' => 'int',
'postal_code' => 'string',
'provider_code' => 'int',
'receptive_code' => 'int',
'service_type' => 'string',
'web_checkpickup' => 'bool',
'zone_code' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'city' => null,
'code' => 'int32',
'company_code' => null,
'country_code' => null,
'hotel_code' => 'int32',
'is_terminal' => null,
'latitude' => 'double',
'longitude' => 'double',
'name' => null,
'office_code' => 'int32',
'postal_code' => null,
'provider_code' => 'int32',
'receptive_code' => 'int32',
'service_type' => null,
'web_checkpickup' => null,
'zone_code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'city' => 'city',
'code' => 'code',
'company_code' => 'companyCode',
'country_code' => 'countryCode',
'hotel_code' => 'hotelCode',
'is_terminal' => 'isTerminal',
'latitude' => 'latitude',
'longitude' => 'longitude',
'name' => 'name',
'office_code' => 'officeCode',
'postal_code' => 'postalCode',
'provider_code' => 'providerCode',
'receptive_code' => 'receptiveCode',
'service_type' => 'serviceType',
'web_checkpickup' => 'webCheckpickup',
'zone_code' => 'zoneCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'city' => 'setCity',
'code' => 'setCode',
'company_code' => 'setCompanyCode',
'country_code' => 'setCountryCode',
'hotel_code' => 'setHotelCode',
'is_terminal' => 'setIsTerminal',
'latitude' => 'setLatitude',
'longitude' => 'setLongitude',
'name' => 'setName',
'office_code' => 'setOfficeCode',
'postal_code' => 'setPostalCode',
'provider_code' => 'setProviderCode',
'receptive_code' => 'setReceptiveCode',
'service_type' => 'setServiceType',
'web_checkpickup' => 'setWebCheckpickup',
'zone_code' => 'setZoneCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'city' => 'getCity',
'code' => 'getCode',
'company_code' => 'getCompanyCode',
'country_code' => 'getCountryCode',
'hotel_code' => 'getHotelCode',
'is_terminal' => 'getIsTerminal',
'latitude' => 'getLatitude',
'longitude' => 'getLongitude',
'name' => 'getName',
'office_code' => 'getOfficeCode',
'postal_code' => 'getPostalCode',
'provider_code' => 'getProviderCode',
'receptive_code' => 'getReceptiveCode',
'service_type' => 'getServiceType',
'web_checkpickup' => 'getWebCheckpickup',
'zone_code' => 'getZoneCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['hotel_code'] = isset($data['hotel_code']) ? $data['hotel_code'] : null;
        $this->container['is_terminal'] = isset($data['is_terminal']) ? $data['is_terminal'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['office_code'] = isset($data['office_code']) ? $data['office_code'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['receptive_code'] = isset($data['receptive_code']) ? $data['receptive_code'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['web_checkpickup'] = isset($data['web_checkpickup']) ? $data['web_checkpickup'] : null;
        $this->container['zone_code'] = isset($data['zone_code']) ? $data['zone_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets code
     *
     * @return int
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param int $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code company_code
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets hotel_code
     *
     * @return int
     */
    public function getHotelCode()
    {
        return $this->container['hotel_code'];
    }

    /**
     * Sets hotel_code
     *
     * @param int $hotel_code hotel_code
     *
     * @return $this
     */
    public function setHotelCode($hotel_code)
    {
        $this->container['hotel_code'] = $hotel_code;

        return $this;
    }

    /**
     * Gets is_terminal
     *
     * @return string
     */
    public function getIsTerminal()
    {
        return $this->container['is_terminal'];
    }

    /**
     * Sets is_terminal
     *
     * @param string $is_terminal is_terminal
     *
     * @return $this
     */
    public function setIsTerminal($is_terminal)
    {
        $this->container['is_terminal'] = $is_terminal;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return double
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param double $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return double
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param double $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return int
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param int $office_code office_code
     *
     * @return $this
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets provider_code
     *
     * @return int
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param int $provider_code provider_code
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets receptive_code
     *
     * @return int
     */
    public function getReceptiveCode()
    {
        return $this->container['receptive_code'];
    }

    /**
     * Sets receptive_code
     *
     * @param int $receptive_code receptive_code
     *
     * @return $this
     */
    public function setReceptiveCode($receptive_code)
    {
        $this->container['receptive_code'] = $receptive_code;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string $service_type service_type
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets web_checkpickup
     *
     * @return bool
     */
    public function getWebCheckpickup()
    {
        return $this->container['web_checkpickup'];
    }

    /**
     * Sets web_checkpickup
     *
     * @param bool $web_checkpickup web_checkpickup
     *
     * @return $this
     */
    public function setWebCheckpickup($web_checkpickup)
    {
        $this->container['web_checkpickup'] = $web_checkpickup;

        return $this;
    }

    /**
     * Gets zone_code
     *
     * @return string
     */
    public function getZoneCode()
    {
        return $this->container['zone_code'];
    }

    /**
     * Sets zone_code
     *
     * @param string $zone_code zone_code
     *
     * @return $this
     */
    public function setZoneCode($zone_code)
    {
        $this->container['zone_code'] = $zone_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
