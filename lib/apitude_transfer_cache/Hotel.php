<?php
/**
 * Hotel
 *
 * PHP version 5
 *
 * @category Class
 * @package  transfercache
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transfer Cache API
 *
 * # APItude Transfer Cache API  APItude also includes now the ability to download the transfers content & portfolio. This API will provide you with availability to **cache and download the routes operated by transfer services and as well as the rest of the static content**, like terminals, pickup points and such.  APItude transfers CACHE API is designed to provide Hotelbeds Group clients with a set of API calls to download:   * Routes * Pickup points * Hotels * Currencies * Master Data (Transfer types, Categories & Vehicle types) * Locations (countries, destinations & terminals)  APItude Transfers CACHE API is delivered via HTTPS GET requests. Reesponse data is returned in JSON, allowing you to easily build requests and parse responses in a standard way by using the tools included with most of the modern languages. Every exposed HTTP resource allows every client to create paginated responses by means of using offset & limit attributes.
 *
 * OpenAPI spec version: 1.0
 * Contact: integrations.btb@hotelbeds.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace transfercache\apitude_transfer_cache;

use \ArrayAccess;
use \transfercache\ObjectSerializer;

/**
 * Hotel Class Doc Comment
 *
 * @category Class
 * @description The Hotel Object.
 * @package  transfercache
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Hotel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Hotel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
'category' => 'string',
'chain_code' => 'string',
'city' => 'string',
'code' => 'string',
'coordinates' => '\transfercache\apitude_transfer_cache\Coordinates',
'country_code' => 'string',
'description' => 'string',
'destination_code' => 'string',
'giata_code' => 'string',
'name' => 'string',
'postal_code' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'category' => null,
'chain_code' => null,
'city' => null,
'code' => null,
'coordinates' => null,
'country_code' => null,
'description' => null,
'destination_code' => null,
'giata_code' => null,
'name' => null,
'postal_code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'category' => 'category',
'chain_code' => 'chainCode',
'city' => 'city',
'code' => 'code',
'coordinates' => 'coordinates',
'country_code' => 'countryCode',
'description' => 'description',
'destination_code' => 'destinationCode',
'giata_code' => 'giataCode',
'name' => 'name',
'postal_code' => 'postalCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'category' => 'setCategory',
'chain_code' => 'setChainCode',
'city' => 'setCity',
'code' => 'setCode',
'coordinates' => 'setCoordinates',
'country_code' => 'setCountryCode',
'description' => 'setDescription',
'destination_code' => 'setDestinationCode',
'giata_code' => 'setGiataCode',
'name' => 'setName',
'postal_code' => 'setPostalCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'category' => 'getCategory',
'chain_code' => 'getChainCode',
'city' => 'getCity',
'code' => 'getCode',
'coordinates' => 'getCoordinates',
'country_code' => 'getCountryCode',
'description' => 'getDescription',
'destination_code' => 'getDestinationCode',
'giata_code' => 'getGiataCode',
'name' => 'getName',
'postal_code' => 'getPostalCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['chain_code'] = isset($data['chain_code']) ? $data['chain_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['coordinates'] = isset($data['coordinates']) ? $data['coordinates'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['destination_code'] = isset($data['destination_code']) ? $data['destination_code'] : null;
        $this->container['giata_code'] = isset($data['giata_code']) ? $data['giata_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Hotel address.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Hotel category.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets chain_code
     *
     * @return string
     */
    public function getChainCode()
    {
        return $this->container['chain_code'];
    }

    /**
     * Sets chain_code
     *
     * @param string $chain_code Hotel chain code.
     *
     * @return $this
     */
    public function setChainCode($chain_code)
    {
        $this->container['chain_code'] = $chain_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Hotel city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Hotel code.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets coordinates
     *
     * @return \transfercache\apitude_transfer_cache\Coordinates
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \transfercache\apitude_transfer_cache\Coordinates $coordinates coordinates
     *
     * @return $this
     */
    public function setCoordinates($coordinates)
    {
        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Hotel description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets destination_code
     *
     * @return string
     */
    public function getDestinationCode()
    {
        return $this->container['destination_code'];
    }

    /**
     * Sets destination_code
     *
     * @param string $destination_code Destination name.
     *
     * @return $this
     */
    public function setDestinationCode($destination_code)
    {
        $this->container['destination_code'] = $destination_code;

        return $this;
    }

    /**
     * Gets giata_code
     *
     * @return string
     */
    public function getGiataCode()
    {
        return $this->container['giata_code'];
    }

    /**
     * Sets giata_code
     *
     * @param string $giata_code Giata Hotel code.
     *
     * @return $this
     */
    public function setGiataCode($giata_code)
    {
        $this->container['giata_code'] = $giata_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Hotel name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Hotel postal code.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
